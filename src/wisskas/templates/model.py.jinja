from pydantic import AnyUrl, BaseModel, Field  # noqa: F401
from rdfproxy import ConfigDict, SPARQLBinding
from typing import Annotated

{%- macro model(class) -%}
  {# recurse first to generate nested models #}
  {%- for field in class.fields.values() -%}
    {% if field.fields -%}
      {{- model(field) -}}
    {%- endif -%}
  {% endfor %}

{% set is_grouped = class.fields.values() | selectattr('cardinality', '==', -1) | first %}

class {{ class.class_name }}(BaseModel):
    {%- if description %}
        """
        {{ description | indent(4) }}
        """
    {%- endif %}
    model_config = ConfigDict(
        title="{{ class.name }}",
        {%- if is_grouped %}
        enforce_grouping_consistency=False,
        group_by="id",
        {%- endif %}
        {%- if class.orderable_fields %}
        orderable_fields=["{{ class.orderable_fields | join('", "') }}"],
        {%- endif %}
    )
    {%- if is_grouped and not class.root -%}{# model needs it (if this model exists, so can be none) #}
    id: Annotated[AnyUrl | None, SPARQLBinding("{{ class.binding }}")] = {% if class.include_id %}None{% else %}Field(default=None, exclude=True){% endif %}
    {%- elif class.root or class.include_id %}{# non-grouped, i.e. basic nested model #}
    id: Annotated[AnyUrl, SPARQLBinding("{{ class.binding }}")]
    {%- endif %}
{% for fieldname, field in class.fields.items() %}
    {{ fieldname ~ ": "}}
    {%- if field.binding -%}
    Annotated[
    {%- endif -%}
    {%- if field.cardinality == -1 -%}
    list[
    {%- endif -%}
    {%- if field.type -%}
    {{- field.type -}}
    {%- elif field.class_name -%}
    {{ field.class_name }}
    {%- else -%}
    ????
    {% endif %}
    {%- if (root.everything_optional and field.cardinality != -1 and not field.count) or not is_grouped %} | None{% endif %}
    {%- if field.cardinality == -1 -%}
    ]
    {%- endif -%}
    {%- if field.binding -%}
      , SPARQLBinding("{{ field.binding }}")]
    {%- endif -%}
    {%- if root.everything_optional and field.cardinality != -1 and field.fields %} = None{%- endif -%}

{%- endfor -%}
{%- endmacro -%}

{{ model(root) }}

