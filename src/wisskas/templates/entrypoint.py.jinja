from fastapi import FastAPI, Query
{%- if cors %}
from fastapi.middleware.cors import CORSMiddleware
{%- endif -%}
{%- if git %}
from git import Repo
{%- endif %}
from os import path
from rdfproxy import Page, QueryParameters, SPARQLModelAdapter
from typing import Annotated

{% for endpoint in endpoints.values() -%}
from {{ endpoint.filename }} import {{ endpoint.class_name }}
{% endfor %}

app = FastAPI()

{% if cors -%}
app.add_middleware(
    CORSMiddleware,
    allow_origins={{ cors.origins | default(["*"], true) }},
    allow_credentials=True,
    allow_methods={{ cors.methods | default(["*"], true) }},
    allow_headers={{ cors.headers | default(["*"], true) }},
)
{% endif -%}

{%- if git %}
# The automatic health check endpoint is /. The return code has to be 200 or 30x.
@app.get("/")
def version():
    repo = Repo(search_parent_directories=True)
    return {"version": repo.git.describe(tags=True, dirty=True, always=True)}

{% endif %}

def load_query(name):
    return open(f"{path.dirname(path.realpath(__file__))}/{name}.rq").read().replace("\n ", " ")

{% for url, endpoint in endpoints.items() %}
@app.get("{{ url }}")
{%- if endpoint.details %}
def {{endpoint.filename}}(unique_identifier: str) -> {{ endpoint.class_name }}:
{% else %}
def {{endpoint.filename}}(params: Annotated[QueryParameters[{{ endpoint.class_name }}], Query()]) -> Page[{{ endpoint.class_name }}]:
{% endif %}
    query = load_query("{{ endpoint.filename }}")

{%- if endpoint.details %}

    # "DETAIL" ENDPOINT DESIGN QUESTION: how to inject the id parameter into the query and handle the result

    # CURRENT workaround option: modify query manually (requires referring to the binding name),
    # just run manually modified query for 1 result
    #query += f' FILTER (?{endpoint.binding}="{unique_identifier}"^^xsd:string)'
{%- endif %}
    adapter = SPARQLModelAdapter(
        target="{{ backend_address }}",
        query=query,
        model={{ endpoint.class_name }},
    )

{% if endpoint.details %}
    result = adapter.query(QueryParameters(size=1))

    # OPTION 1: use rdfproxy's 'filter' (which can refer to the model field, rather than
    # the binding variable)
    #result = adapter.query(QueryParameters(filter={"model_id_field": unique_identifier}))

    # with the CURRENT and OPTION 1, still need to manually assert that result.total == 1, then:
    return result.items[0]

    # OPTION 2: rdfproxy could provide a dedicated method for single results:
    #return adapter.queryOne(model_id_field=unique_identifier)
{% else %}
    return adapter.query(params)
{% endif %}

{%- endfor %}
