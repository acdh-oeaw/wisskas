from os import path
from typing import Annotated

from fastapi import FastAPI, Query
{%- if cors %}
from fastapi.middleware.cors import CORSMiddleware
{%- endif -%}
{%- if git %}
from git import Repo
{%- endif %}
from rdfproxy import Page, QueryParameters, SPARQLModelAdapter

{% for endpoint in endpoints.values() -%}
from {{ endpoint.filename }} import {{ endpoint.class_name }}
{% endfor %}

app = FastAPI()

{% if cors -%}
app.add_middleware(
    CORSMiddleware,
    allow_origins={{ cors.origins | default(["*"], true) }},
    allow_credentials=True,
    allow_methods={{ cors.methods | default(["*"], true) }},
    allow_headers={{ cors.headers | default(["*"], true) }},
)
{% endif -%}

{%- if git %}
# The automatic health check endpoint is /. The return code has to be 200 or 30x.
@app.get("/")
def version():
    repo = Repo(search_parent_directories=True)
    return {"version": repo.git.describe(tags=True, dirty=True, always=True)}

{% endif %}

def load_query(name):
    with open(f"{path.dirname(path.realpath(__file__))}/{name}.rq") as query:
        return query.read().replace("\n ", " ")

{% for url, endpoint in endpoints.items() %}
@app.get("{{ url }}")
{%- if endpoint.item_key %}
def {{endpoint.filename}}(unique_identifier: str) -> {{ endpoint.class_name }}:
{% else %}
def {{endpoint.filename}}(params: Annotated[QueryParameters[{{ endpoint.class_name }}], Query()]) -> Page[{{ endpoint.class_name }}]:
{% endif %}
    query = load_query("{{ endpoint.filename }}")
    adapter = SPARQLModelAdapter(
        target="{{ backend_address }}",
        query=query,
        model={{ endpoint.class_name }},
    )

{% if endpoint.item_key %}
    return adapter.get_detail(**{ "{{ endpoint.item_key }}": unique_identifier})
{% else %}
    return adapter.get_page(params)
{% endif %}

{%- endfor %}

{% if counts %}
@app.get("/counts")
def counts():
    return {
    {%- for url, endpoint in endpoints.items() %}
        "{{endpoint.filename}}": {{endpoint.filename}}(params=QueryParameters(size=1)).total,
    {%- endfor %}
    }
{% endif %}
